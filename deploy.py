#!/usr/bin/env python3
"""
Personal Website Deployment Script
A Python-based deployment tool for AWS infrastructure and static website.
"""

import os
import sys
import json
import subprocess
import argparse
import boto3
from pathlib import Path
from dotenv import load_dotenv
import click
from python_terraform import Terraform

# Load environment variables
load_dotenv()

class WebsiteDeployer:
    def __init__(self, config_file="deploy_config.json"):
        self.config_file = config_file
        self.config = self.load_config()
        self.terraform_dir = Path("terraform")
        
    def load_config(self):
        """Load deployment configuration from JSON file."""
        default_config = {
            "aws_region": "us-east-1",
            "bucket_name": "edson-personal-website",
            "domain_name": "",
            "environment": "production",
            "exclude_patterns": [
                "terraform/*",
                "tests/*",
                "*.py",
                "*.md",
                "requirements.txt",
                ".git/*",
                "__pycache__/*",
                "*.pyc",
                ".env",
                "deploy_config.json"
            ]
        }
        
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                config = json.load(f)
                # Merge with defaults
                default_config.update(config)
        else:
            # Create default config file
            with open(self.config_file, 'w') as f:
                json.dump(default_config, f, indent=2)
            click.echo(f"Created default config file: {self.config_file}")
            
        return default_config
    
    def check_prerequisites(self):
        """Check if required tools are installed."""
        tools = {
            'terraform': 'Terraform is required. Install from: https://www.terraform.io/downloads.html',
            'aws': 'AWS CLI is required. Install from: https://aws.amazon.com/cli/'
        }
        
        missing_tools = []
        for tool, message in tools.items():
            if not self._command_exists(tool):
                missing_tools.append((tool, message))
        
        if missing_tools:
            click.echo("Missing required tools:", err=True)
            for tool, message in missing_tools:
                click.echo(f"‚ùå {tool}: {message}", err=True)
            return False
        
        # Check AWS credentials
        try:
            boto3.client('sts').get_caller_identity()
            click.echo("‚úÖ AWS credentials verified")
        except Exception as e:
            click.echo(f"‚ùå AWS credentials not configured: {e}", err=True)
            click.echo("Please run: aws configure", err=True)
            return False
            
        click.echo("‚úÖ All prerequisites met")
        return True
    
    def _command_exists(self, command):
        """Check if a command exists in PATH."""
        try:
            subprocess.run([command, '--version'], 
                         capture_output=True, check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False
    
    def create_terraform_vars(self):
        """Create terraform.tfvars file from config."""
        tfvars_path = self.terraform_dir / "terraform.tfvars"
        
        tfvars_content = f"""# Generated by deploy.py
aws_region = "{self.config['aws_region']}"
bucket_name = "{self.config['bucket_name']}"
domain_name = "{self.config['domain_name']}"
environment = "{self.config['environment']}"

tags = {{
  Project     = "Personal Website"
  Owner       = "Edson da Silva"
  Environment = "{self.config['environment']}"
  CreatedBy   = "Python Deploy Script"
}}
"""
        
        with open(tfvars_path, 'w') as f:
            f.write(tfvars_content)
        
        click.echo(f"‚úÖ Created {tfvars_path}")
    
    def terraform_init(self):
        """Initialize Terraform."""
        click.echo("üîß Initializing Terraform...")
        tf = Terraform(working_dir=str(self.terraform_dir))
        return_code, stdout, stderr = tf.init()
        
        if return_code != 0:
            click.echo(f"‚ùå Terraform init failed: {stderr}", err=True)
            return False
        
        click.echo("‚úÖ Terraform initialized")
        return True
    
    def terraform_plan(self):
        """Run Terraform plan."""
        click.echo("üìã Running Terraform plan...")
        tf = Terraform(working_dir=str(self.terraform_dir))
        return_code, stdout, stderr = tf.plan()
        
        if return_code != 0:
            click.echo(f"‚ùå Terraform plan failed: {stderr}", err=True)
            return False
        
        click.echo(stdout)
        return True
    
    def terraform_apply(self):
        """Apply Terraform configuration."""
        click.echo("üöÄ Applying Terraform configuration...")
        tf = Terraform(working_dir=str(self.terraform_dir))
        return_code, stdout, stderr = tf.apply(skip_plan=True, auto_approve=True)
        
        if return_code != 0:
            click.echo(f"‚ùå Terraform apply failed: {stderr}", err=True)
            return False
        
        click.echo("‚úÖ Infrastructure deployed successfully!")
        return True
    
    def terraform_destroy(self):
        """Destroy Terraform infrastructure."""
        click.echo("üóëÔ∏è  Destroying Terraform infrastructure...")
        if not click.confirm("Are you sure you want to destroy all infrastructure?"):
            click.echo("Deployment cancelled")
            return False
        
        tf = Terraform(working_dir=str(self.terraform_dir))
        return_code, stdout, stderr = tf.destroy(auto_approve=True)
        
        if return_code != 0:
            click.echo(f"‚ùå Terraform destroy failed: {stderr}", err=True)
            return False
        
        click.echo("‚úÖ Infrastructure destroyed")
        return True
    
    def get_terraform_outputs(self):
        """Get Terraform outputs."""
        tf = Terraform(working_dir=str(self.terraform_dir))
        return tf.output()
    
    def deploy_website_files(self):
        """Deploy website files to S3."""
        click.echo("üìÅ Deploying website files to S3...")
        
        # Get bucket name from Terraform output
        outputs = self.get_terraform_outputs()
        bucket_name = outputs.get('s3_bucket_name', {}).get('value')
        
        if not bucket_name:
            click.echo("‚ùå Could not get S3 bucket name from Terraform outputs", err=True)
            return False
        
        # Use AWS CLI to sync files
        sync_command = [
            'aws', 's3', 'sync', '.', f's3://{bucket_name}',
            '--delete'
        ]
        
        # Add exclude patterns
        for pattern in self.config['exclude_patterns']:
            sync_command.extend(['--exclude', pattern])
        
        try:
            result = subprocess.run(sync_command, capture_output=True, text=True, check=True)
            click.echo("‚úÖ Website files deployed successfully!")
            
            # Get website URL
            website_url = outputs.get('website_url', {}).get('value')
            if website_url:
                click.echo(f"üåê Website URL: {website_url}")
            
            return True
        except subprocess.CalledProcessError as e:
            click.echo(f"‚ùå Failed to deploy website files: {e.stderr}", err=True)
            return False
    
    def invalidate_cloudfront(self):
        """Invalidate CloudFront cache."""
        click.echo("üîÑ Invalidating CloudFront cache...")
        
        outputs = self.get_terraform_outputs()
        distribution_id = outputs.get('cloudfront_distribution_id', {}).get('value')
        
        if not distribution_id:
            click.echo("‚ö†Ô∏è  Could not get CloudFront distribution ID", err=True)
            return False
        
        try:
            client = boto3.client('cloudfront')
            response = client.create_invalidation(
                DistributionId=distribution_id,
                InvalidationBatch={
                    'Paths': {
                        'Quantity': 1,
                        'Items': ['/*']
                    },
                    'CallerReference': str(hash(f"{distribution_id}-{os.urandom(8).hex()}"))
                }
            )
            
            invalidation_id = response['Invalidation']['Id']
            click.echo(f"‚úÖ CloudFront invalidation created: {invalidation_id}")
            return True
        except Exception as e:
            click.echo(f"‚ùå Failed to invalidate CloudFront: {e}", err=True)
            return False

@click.command()
@click.option('--action', '-a', 
              type=click.Choice(['plan', 'apply', 'destroy', 'deploy-files', 'invalidate']),
              default='plan',
              help='Action to perform')
@click.option('--bucket-name', '-b',
              help='S3 bucket name (overrides config)')
@click.option('--domain-name', '-d',
              help='Domain name (overrides config)')
@click.option('--region', '-r',
              help='AWS region (overrides config)')
@click.option('--config', '-c',
              default='deploy_config.json',
              help='Configuration file path')
def main(action, bucket_name, domain_name, region, config):
    """Personal Website Deployment Tool"""
    
    click.echo("üöÄ Personal Website Deployment Tool")
    click.echo("=" * 40)
    
    deployer = WebsiteDeployer(config)
    
    # Override config with command line options
    if bucket_name:
        deployer.config['bucket_name'] = bucket_name
    if domain_name:
        deployer.config['domain_name'] = domain_name
    if region:
        deployer.config['aws_region'] = region
    
    # Check prerequisites
    if not deployer.check_prerequisites():
        sys.exit(1)
    
    # Create Terraform variables
    deployer.create_terraform_vars()
    
    # Initialize Terraform
    if not deployer.terraform_init():
        sys.exit(1)
    
    # Execute requested action
    success = True
    
    if action == 'plan':
        success = deployer.terraform_plan()
    
    elif action == 'apply':
        success = (deployer.terraform_plan() and 
                  deployer.terraform_apply() and
                  deployer.deploy_website_files())
        
        if success:
            deployer.invalidate_cloudfront()
    
    elif action == 'destroy':
        success = deployer.terraform_destroy()
    
    elif action == 'deploy-files':
        success = deployer.deploy_website_files()
        if success:
            deployer.invalidate_cloudfront()
    
    elif action == 'invalidate':
        success = deployer.invalidate_cloudfront()
    
    if success:
        click.echo("‚úÖ Deployment completed successfully!")
    else:
        click.echo("‚ùå Deployment failed!")
        sys.exit(1)

if __name__ == '__main__':
    main()
